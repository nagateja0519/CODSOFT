# -*- coding: utf-8 -*-
"""Titanic_survival_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_imHow-id6--qIprBKZBNdfG8cCNao2q
"""

import pandas as pd
from matplotlib import pyplot as plt

from google.colab import files
uploaded = files.upload()

data=pd.read_csv('tested.csv')
data.head()

data.shape

data['Survived'].value_counts()

"""0 indicates dead and 1 indicates alive . That means 266 people are dead and 152 people are alive.lets plot the bar graph."""

plt.figure(figsize=(2,5))
plt.bar(list(data['Survived'].value_counts().keys()),list(data['Survived'].value_counts()),color=["r","g"])
plt.show

data['Pclass'].value_counts()

"""Pclass means passanger class , 218 people are in 3rd class , 107 people are in 1st class and 93 people are in 2nd class. let plot the graph."""

plt.figure(figsize=(3,3))
plt.bar(list(data['Pclass'].value_counts().keys()),list(data['Pclass'].value_counts()),color=["r","b","g"])
plt.show

data['Sex'].value_counts()

"""266 people are male and 152 people are female"""

plt.figure(figsize=(2,4))
plt.bar(list(data['Sex'].value_counts().keys()),list(data['Sex'].value_counts()),color=["r","b"])
plt.show

plt.figure(figsize=(5,7))
plt.hist(data['Age'])
plt.title('Distribution of Age')
plt.xlabel('Age')
plt.show

sum(data['Survived'].isnull())

"""Survived column has no null values"""

sum(data['Age'].isnull())

"""86 rows have null values in age column"""

sum(data['Embarked'].isnull())

sum(data['Fare'].isnull())

sum(data['Ticket'].isnull())

"""PassengerId , Name and cabin does not effect the output . so , let drop that columns."""

data=data.drop(['PassengerId','Name','Cabin'],axis=1)
data.head()

"""if we use dropna then our dataset size will reduce ,  so instead of doing that let replace that null value with some random value."""

from sklearn.preprocessing import OrdinalEncoder,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,confusion_matrix

data['Age']=data['Age'].fillna(30)
data['Fare']=data['Fare'].fillna(32)
encoder=OrdinalEncoder()
data['Ticket']=encoder.fit_transform(data[['Ticket']])
data

data=pd.get_dummies(data)
data

y=data['Survived']#output
x=data.drop(['Survived'],axis=1)#input

x.head()

y.head()

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)

sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test)

x_train
x_train.shape

y_train

x_test
x_test.shape

model=LogisticRegression()
model.fit(x_train,y_train)

y_predict=model.predict(x_test)

y_predict

acc=accuracy_score(y_test,y_predict)
acc